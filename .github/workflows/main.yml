# .github/workflows/uc‑05‑deployment.yml
# Updated with best‑practice tweaks discussed earlier
# ──────────────────────────────────────────────────────
name: UC-05 Deployment Workflow

'on':                       # quoted to avoid YAML 1.1 boolean
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write           # for OIDC → AWS
  contents: read            # needed for actions/checkout

# ──────────────────────────────────────────────────────
jobs:

  lint-and-security:
    name: Lint and Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install TFLint
        run: |
          wget https://github.com/terraform-linters/tflint/releases/download/v0.50.2/tflint_linux_amd64.zip
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/
          tflint --version

      - name: Run TFLint
        run: tflint --init && tflint -f compact

      - name: Install Checkov
        run: pip install --quiet checkov

      - name: Run Checkov with soft‑fail
        run: checkov --directory . --soft-fail

  terraform:
    name: Terraform ${{ github.event.inputs.action || 'apply' }}
    runs-on: ubuntu-latest
    needs: lint-and-security                      # ← block apply/destroy if linting fails

    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
      ACTION: ${{ github.event.inputs.action || 'apply' }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Optional cache to speed up provider/plugin downloads
      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.1                 # ← pin for reproducibility

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION || 'us-east-1' }}

      # - name: Configure AWS credentials via OIDC
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::058264536782:role/oidc-assume-roles
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Format Terraform code
      #   run: terraform fmt -check -recursive

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform
        run: terraform validate

      - name: Terraform Plan
        if: env.ACTION == 'apply'
        run: terraform plan -var-file="terraform.tfvars" \
                            -lock-timeout=30s \
                            -input=false \
                            -out=tfplan.binary

      - name: Show Terraform Plan Summary
        if: env.ACTION == 'apply'
        run: terraform show -no-color tfplan.binary

      - name: Upload Plan Artifact
        if: env.ACTION == 'apply'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-binary
          path: tfplan.binary

      - name: Terraform Apply (from saved plan)
        if: env.ACTION == 'apply'
        run: terraform apply -auto-approve tfplan.binary

      - name: Terraform Destroy
        if: env.ACTION == 'destroy'
        run: terraform destroy -auto-approve
